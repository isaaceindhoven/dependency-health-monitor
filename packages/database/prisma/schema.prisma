generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator zod {
  provider              = "zod-prisma"
  output                = "../src/zod"
  relationModel         = true
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  useDecimalJs          = true
  prismaJsonNullability = true
}

model Package {
  id           String             @id @default(uuid())
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  name         String             @unique
  version      String
  funding      Json?
  author       Json?
  dependents   PackageRelations[] @relation("dependency")
  dependencies PackageRelations[] @relation("dependent")
  reports      ReportsPackages[]
}

enum PackageEdgeType {
  IN
  OUT
}

model PackageRelations {
  dependent      Package @relation(name: "dependent", fields: [dependentName], references: [name], onUpdate: NoAction)
  dependentName  String
  dependency     Package @relation(name: "dependency", fields: [dependencyName], references: [name], onUpdate: NoAction)
  dependencyName String

  @@id([dependentName, dependencyName])
  @@unique([dependentName, dependencyName])
}

model Report {
  id        String            @id @default(uuid())
  checksum  String            @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  packages  ReportsPackages[]
}

model ReportsPackages {
  id        String  @id @default(uuid())
  reportId  String
  Report    Report  @relation(fields: [reportId], references: [id])
  packageId String
  Package   Package @relation(fields: [packageId], references: [id])
}
